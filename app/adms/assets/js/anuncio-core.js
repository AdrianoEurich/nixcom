/**
 * AN√öNCIO CORE - Fun√ß√µes principais e inicializa√ß√£o
 * Vers√£o: 3.0 (Modular Simples)
 */

console.log('üîß AN√öNCIO CORE carregado');

// Vari√°veis globais
let form;
let formMode;
let userRole;
let userPlanType;
let anuncioData = null;

/**
 * Fun√ß√£o principal de inicializa√ß√£o
 */
async function initializeAnuncioFormPage(fullUrl, initialData = null) {
    console.log('üéØ AN√öNCIO CORE: Inicializando p√°gina de formul√°rio de an√∫ncio');
    console.log('üîç DEBUG: fullUrl:', fullUrl, '| initialData:', initialData);

    form = document.getElementById('formAnuncio');
    if (!form) {
        console.error('‚ùå AN√öNCIO CORE: Formul√°rio "formAnuncio" n√£o encontrado.');
        window.showFeedbackModal('error', 'Erro interno: Formul√°rio de an√∫ncio n√£o encontrado.', 'Erro de Inicializa√ß√£o');
        return;
    }

    formMode = form.dataset.formMode || 'create';
    userRole = document.body.dataset.userRole || 'usuario';
    userPlanType = form.dataset.userPlanType || document.body.dataset.userPlanType || 'free';

    console.log("üîç DEBUG: formMode:", formMode, "| userRole:", userRole, "| userPlanType:", userPlanType);

    // Inicializar m√≥dulos
    if (window.AnuncioValidation) {
        window.AnuncioValidation.init(form, formMode, userPlanType);
    }
    
    // M√°scaras ser√£o aplicadas depois que os dados forem carregados
    
    // Localiza√ß√µes ser√£o inicializadas depois que os dados forem carregados no modo de edi√ß√£o
    if (formMode !== 'edit' && window.AnuncioLocations) {
        console.log("‚úÖ AN√öNCIO CORE: Inicializando m√≥dulo de localiza√ß√µes");
        await window.AnuncioLocations.init(form, formMode, initialData);
    } else if (formMode === 'edit' && window.AnuncioLocations) {
        console.log("‚úÖ AN√öNCIO CORE: Modo de edi√ß√£o - localiza√ß√µes ser√£o inicializadas depois");
    } else {
        console.error("‚ùå AN√öNCIO CORE: M√≥dulo de localiza√ß√µes n√£o encontrado");
    }
    
    if (window.AnuncioUploads) {
        console.log("‚úÖ AN√öNCIO CORE: Inicializando m√≥dulo de uploads");
        window.AnuncioUploads.init(form, formMode, userPlanType);
    } else {
        console.error("‚ùå AN√öNCIO CORE: M√≥dulo de uploads n√£o encontrado");
    }
    
    if (window.AnuncioForms) {
        window.AnuncioForms.init(form, formMode, userRole, userPlanType);
    }

    console.log("‚úÖ AN√öNCIO CORE: Todos os m√≥dulos inicializados");

    if (formMode === 'edit') {
        console.log("üìù AN√öNCIO CORE: Modo edi√ß√£o detectado");
        await loadAnuncioDataForEdit(fullUrl);
    } else {
        console.log("‚ûï AN√öNCIO CORE: Modo cria√ß√£o");
        initializeCreateMode();
    }
};

async function loadAnuncioDataForEdit(fullUrl) {
    // Limpar a URL removendo fragmentos (#) e extrair o ID
    const cleanUrl = fullUrl.split('#')[0];
    const urlParts = cleanUrl.split('?');
    const anuncioId = urlParts.length > 1 ? new URLSearchParams(urlParts[1]).get('id') : null;
    
    if (!anuncioId) {
        console.error('‚ùå AN√öNCIO CORE: ID do an√∫ncio n√£o encontrado na URL para edi√ß√£o.');
        console.error('‚ùå AN√öNCIO CORE: URL original:', fullUrl);
        console.error('‚ùå AN√öNCIO CORE: URL limpa:', cleanUrl);
        window.showFeedbackModal('error', 'Erro: ID do an√∫ncio n√£o especificado para edi√ß√£o.', 'Erro de Carregamento');
        return;
    }
    console.log("üîç DEBUG: An√∫ncio ID:", anuncioId);

    try {
        const response = await fetch(`${window.URLADM}anuncio/editarAnuncio?id=${anuncioId}&ajax_data_only=true`, {
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        });
        const result = await response.json();

        if (result.success && result.anuncio) {
            anuncioData = result.anuncio;
            console.log("‚úÖ AN√öNCIO CORE: Dados do an√∫ncio carregados:", anuncioData);
            console.log("üîç DEBUG: anuncioData.videos:", anuncioData.videos);
            console.log("üîç DEBUG: anuncioData.audios:", anuncioData.audios);
            console.log("üîç DEBUG: anuncioData.fotos_galeria:", anuncioData.fotos_galeria);
            initializeFormWithData(anuncioData);
        } else {
            console.error('‚ùå AN√öNCIO CORE: Erro ao carregar dados para edi√ß√£o:', result.message || 'Dados n√£o encontrados.');
            window.showFeedbackModal('error', `Erro ao carregar dados do an√∫ncio: ${result.message || 'Dados n√£o encontrados.'}`, 'Erro de Carregamento');
        }
    } catch (error) {
        console.error('‚ùå AN√öNCIO CORE: Erro ao buscar dados do an√∫ncio para edi√ß√£o:', error);
        window.showFeedbackModal('error', `Erro ao carregar dados do an√∫ncio: ${error.message}`, 'Erro de Carregamento');
    }
}

function initializeCreateMode() {
    console.log("üîß AN√öNCIO CORE: Inicializando formul√°rio para cria√ß√£o");
    initializeFormWithData(null);
    
    // CORRE√á√ÉO: Reinicializar uploads ap√≥s um delay para garantir que o DOM esteja pronto
    setTimeout(() => {
        if (window.AnuncioUploads && window.AnuncioUploads.reinit) {
            console.log("üîÑ AN√öNCIO CORE: Reinicializando uploads para modo cria√ß√£o...");
            window.AnuncioUploads.reinit();
        }
    }, 500);
}

function initializeFormWithData(data) {
    console.log("üîß AN√öNCIO CORE: Inicializando formul√°rio");
    console.log("üîç DEBUG: anuncioData:", data);

    // Preencher campos do formul√°rio
    if (window.AnuncioForms && window.AnuncioForms.populateFormFields) {
        window.AnuncioForms.populateFormFields(data, formMode);
    }
    
    // Aplicar m√°scaras AP√ìS preencher os campos
    if (window.AnuncioMasks) {
        window.AnuncioMasks.init(form);
    }

    // Carregar m√≠dias existentes no modo de edi√ß√£o
    console.log('üîç DEBUG: Verificando condi√ß√µes para carregar m√≠dias...');
    console.log('üîç DEBUG: formMode:', formMode);
    console.log('üîç DEBUG: data existe:', !!data);
    console.log('üîç DEBUG: window.AnuncioUploads existe:', !!window.AnuncioUploads);
    console.log('üîç DEBUG: loadExistingMedia existe:', !!(window.AnuncioUploads && window.AnuncioUploads.loadExistingMedia));
    
    if (formMode === 'edit' && data && window.AnuncioUploads && window.AnuncioUploads.loadExistingMedia) {
        console.log('DEBUG JS: AnuncioCore - Carregando m√≠dias existentes...');
        
        // CORRE√á√ÉO: Usar m√∫ltiplas tentativas para garantir que o DOM esteja pronto
        const loadMediaWithRetry = (attempt = 1, maxAttempts = 5) => {
            console.log(`üîÑ AN√öNCIO CORE: Tentativa ${attempt} de carregar m√≠dias...`);
            
            // Verificar se os containers existem no DOM
            const videoContainers = document.querySelectorAll('#videoUploadBoxes .photo-upload-box');
            const audioContainers = document.querySelectorAll('#audioUploadBoxes .photo-upload-box');
            const galleryContainers = document.querySelectorAll('#galleryUploadBoxes .photo-upload-box');
            
            console.log('üîç DEBUG: Containers encontrados:');
            console.log('  - V√≠deos:', videoContainers.length);
            console.log('  - √Åudios:', audioContainers.length);
            console.log('  - Galeria:', galleryContainers.length);
            
            if (videoContainers.length > 0 || audioContainers.length > 0 || galleryContainers.length > 0) {
                console.log('‚úÖ AN√öNCIO CORE: Containers encontrados, carregando m√≠dias...');
                window.AnuncioUploads.loadExistingMedia(data);
            } else if (attempt < maxAttempts) {
                console.log(`‚è≥ AN√öNCIO CORE: Containers n√£o encontrados, tentando novamente em ${attempt * 200}ms...`);
                setTimeout(() => loadMediaWithRetry(attempt + 1, maxAttempts), attempt * 200);
            } else {
                console.error('‚ùå AN√öNCIO CORE: Falha ao carregar m√≠dias ap√≥s', maxAttempts, 'tentativas');
                // FALLBACK: Tentar carregar m√≠dias mesmo sem containers espec√≠ficos
                console.log('üîÑ AN√öNCIO CORE: Tentando carregar m√≠dias como fallback...');
                window.AnuncioUploads.loadExistingMedia(data);
            }
        };
        
        // Iniciar o carregamento com retry
        setTimeout(() => loadMediaWithRetry(), 100);
    } else {
        console.log('‚ö†Ô∏è AN√öNCIO CORE: Condi√ß√µes n√£o atendidas para carregar m√≠dias');
        console.log('  - formMode:', formMode);
        console.log('  - data:', !!data);
        console.log('  - AnuncioUploads:', !!window.AnuncioUploads);
        console.log('  - loadExistingMedia:', !!(window.AnuncioUploads && window.AnuncioUploads.loadExistingMedia));
    }

    // Inicializar localiza√ß√µes no modo de edi√ß√£o ap√≥s carregar os dados
    if (formMode === 'edit' && data && window.AnuncioLocations) {
        console.log('üîç AN√öNCIO CORE: Inicializando localiza√ß√µes com dados carregados...');
        console.log('üîç AN√öNCIO CORE: Dados para localiza√ß√µes:', data);
        setTimeout(async () => {
            console.log('üîç AN√öNCIO CORE: Executando inicializa√ß√£o de localiza√ß√µes...');
            await window.AnuncioLocations.init(form, formMode, data);
        }, 500);
    } else if (formMode === 'create' && window.AnuncioLocations) {
        console.log('üîç AN√öNCIO CORE: Inicializando localiza√ß√µes no modo de cria√ß√£o...');
        setTimeout(async () => {
            await window.AnuncioLocations.init(form, formMode, null);
        }, 500);
    }

    // Aplicar restri√ß√µes de plano
    if (window.AnuncioUploads && window.AnuncioUploads.applyPlanRestrictions) {
        window.AnuncioUploads.applyPlanRestrictions(userPlanType);
    }

    // Configurar bot√µes de administrador se for admin/administrador e estiver editando
    const userRoleNorm = (userRole || '').toLowerCase();
    if ((userRoleNorm === 'admin' || userRoleNorm === 'administrador') && formMode === 'edit' && data?.id) {
        console.log('DEBUG JS: AnuncioCore - Configurando bot√µes de administrador...');
        if (typeof setupAdminActionButtons === 'function') {
            setupAdminActionButtons(data.id, data.user_id, data.status);
            console.log('‚úÖ AN√öNCIO CORE: Bot√µes de administrador configurados');
        } else {
            console.warn('‚ö†Ô∏è AN√öNCIO CORE: Fun√ß√£o setupAdminActionButtons n√£o encontrada');
        }
    }

    console.log("‚úÖ AN√öNCIO CORE: Formul√°rio inicializado com sucesso");
}

// Criar namespace para o m√≥dulo
window.AnuncioCore = {
    initializeAnuncioFormPage: initializeAnuncioFormPage
};

// Expor fun√ß√£o globalmente tamb√©m
window.initializeAnuncioFormPage = initializeAnuncioFormPage;

console.log("‚úÖ AN√öNCIO CORE: M√≥dulo carregado e pronto");
console.log("üîç DEBUG: Fun√ß√£o initializeAnuncioFormPage exposta:", typeof window.initializeAnuncioFormPage);
console.log("üîç DEBUG: AnuncioCore namespace:", typeof window.AnuncioCore);
