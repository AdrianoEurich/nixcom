/**
 * M√ÅSCARAS FUNCIONAIS v4.0 - Vers√£o Ultra Simplificada
 */

console.log('‚ú® mascaras_funcionais.js v4.0 carregado! ‚ú®');

// ========================================
// FUN√á√ÉO PRINCIPAL DE INICIALIZA√á√ÉO
// ========================================

// Flag para evitar inicializa√ß√£o dupla
let formInitialized = false;

function setupCompleteForm() {
    console.log('üöÄ Inicializando formul√°rio completo...');
    
    // Verificar se j√° foi inicializado
    if (formInitialized) {
        console.log('‚ö†Ô∏è Formul√°rio j√° inicializado, pulando...');
        return;
    }
    
    // Pular em p√°ginas que n√£o precisam (ex.: pagamento)
    const isPaymentPage = document.getElementById('paymentContent') || window.location.href.includes('pagamento');
    if (isPaymentPage) {
        console.log('üßæ P√°gina de pagamento detectada - mascaras_funcionais.js n√£o interfere');
        return;
    }

    // Verificar se estamos na p√°gina de an√∫ncio - se sim, pular inicializa√ß√£o
    const isAnuncioPage = document.querySelector('form[id="formAnuncio"]') || 
                         document.querySelector('form[data-form-mode]') ||
                         window.location.href.includes('anuncio') ||
                         window.location.href.includes('create') ||
                         window.location.href.includes('edit');
    
    if (isAnuncioPage) {
        console.log('üìù P√°gina de an√∫ncio detectada - mascaras_funcionais.js n√£o interfere');
        return;
    }
    
    // Aguardar jQuery estar dispon√≠vel
    if (typeof $ === 'undefined') {
        console.error('ERRO: jQuery n√£o est√° dispon√≠vel');
        setTimeout(setupCompleteForm, 100);
        return;
    }
    
    // Aguardar Inputmask estar dispon√≠vel
    if (typeof $.fn.inputmask === 'undefined') {
        console.error('ERRO: jQuery.Inputmask n√£o est√° dispon√≠vel');
        setTimeout(setupCompleteForm, 100);
        return;
    }
    
    console.log('‚úÖ jQuery e Inputmask dispon√≠veis, aplicando m√°scaras...');
    
    // Marcar como inicializado
    formInitialized = true;
    
    // Aplicar m√°scaras
    applyMasks();
    
    // Configurar uploads - REMOVIDO para evitar duplica√ß√£o com anuncio.js
    // setupUploads();
    
    // Configurar estados e cidades - APENAS se n√£o estiver no modo de edi√ß√£o
    // No modo de edi√ß√£o, o anuncio.js j√° carrega os dados corretos do banco
    const isEditMode = document.querySelector('form[data-form-mode="edit"]') || 
                      document.querySelector('input[name="form_mode"][value="edit"]') ||
                      window.location.href.includes('editarAnuncio');
    
    if (!isEditMode) {
        console.log('üåç mascaras_funcionais.js - Configurando estados e cidades (modo cria√ß√£o)');
        setTimeout(() => {
            setupStatesAndCities();
        }, 200);
    } else {
        console.log('üåç mascaras_funcionais.js - Modo edi√ß√£o detectado, pulando configura√ß√£o de estados/cidades (anuncio.js j√° carrega do banco)');
    }
    
    console.log('‚úÖ Formul√°rio inicializado com sucesso!');
}

// ========================================
// FUN√á√ïES DE M√ÅSCARAS
// ========================================

function applyMasks() {
    console.log('üìù Aplicando m√°scaras...');
    
    // M√°scara de telefone
    const phone = document.getElementById('phone_number');
    if (phone) {
        $(phone).inputmask({ "mask": "(99) 99999-9999" });
        console.log('üìû Telefone configurado');
    }
    
    // M√°scara de idade
    const age = document.getElementById('age');
    if (age) {
        $(age).inputmask("99", { numericInput: true, placeholder: "" });
        console.log('üéÇ Idade configurada');
    }
    
    // M√°scara de altura
    const height = document.getElementById('height_m');
    if (height) {
        $(height).inputmask({
            mask: "9,99",
            placeholder: "0,00",
            onBeforeMask: function (value) {
                return value.replace('.', ',');
            }
        });
        console.log('üìè Altura configurada');
    }
    
    // M√°scara de peso
    const weight = document.getElementById('weight_kg');
    if (weight) {
        $(weight).inputmask({
            mask: "999",
            numericInput: true,
            placeholder: ""
        });
        console.log('‚öñÔ∏è Peso configurado');
    }
    
    // M√°scaras de pre√ßos
    ['price_15min', 'price_30min', 'price_1h'].forEach(id => {
        const input = document.getElementById(id);
        if (input) {
            $(input).inputmask({
                alias: 'numeric',
                groupSeparator: '.',
                radixPoint: ',',
                digits: 2,
                autoGroup: true
            });
            console.log(`üí∞ Pre√ßo ${id} configurado`);
        }
    });
}

// ========================================
// FUN√á√ïES DE UPLOAD
// ========================================

function setupUploads() {
    console.log('üìÅ Configurando uploads...');
    
    // Foto da capa
    const coverInput = document.getElementById('foto_capa_input');
    const coverBox = document.getElementById('coverPhotoUploadBox');
    const coverPreview = document.getElementById('coverPhotoPreview');
    
    if (coverInput && coverBox && coverPreview) {
        // Verificar se j√° foi configurado
        if (coverInput.dataset.configured === 'true') {
            console.log('‚ö†Ô∏è Upload da capa j√° configurado, pulando...');
            return;
        }
        
        coverInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const url = URL.createObjectURL(file);
                coverPreview.src = url;
                coverPreview.style.display = 'block';
                const placeholder = coverBox.querySelector('.upload-placeholder');
                if (placeholder) {
                    placeholder.style.display = 'none';
                }
                console.log('üì∏ Foto da capa selecionada');
            }
        });
        
        coverBox.addEventListener('click', function(e) {
            if (e.target !== coverInput) {
                console.log('üì∏ Clique na caixa da capa');
                coverInput.click();
            }
        });
        
        coverInput.dataset.configured = 'true';
        console.log('‚úÖ Upload da capa configurado');
    }
    
    // Galeria de fotos
    for (let i = 0; i < 20; i++) {
        const input = document.getElementById(`gallery_photo_input_${i}`);
        const box = input?.closest('.photo-upload-box');
        const preview = document.getElementById(`galleryPhotoPreview_${i}`);
        
        if (input && box && preview) {
            // Verificar se j√° foi configurado
            if (input.dataset.configured === 'true') {
                continue;
            }
            
            input.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const url = URL.createObjectURL(file);
                    preview.src = url;
                    preview.style.display = 'block';
                    const placeholder = box.querySelector('.upload-placeholder');
                    if (placeholder) {
                        placeholder.style.display = 'none';
                    }
                    console.log(`üì∏ Galeria ${i} selecionada`);
                }
            });
            
            box.addEventListener('click', function(e) {
                if (e.target !== input) {
                    console.log(`üì∏ Clique na galeria ${i}`);
                    input.click();
                }
            });
            
            input.dataset.configured = 'true';
        }
    }
    
    // V√≠deo de confirma√ß√£o
    const confInput = document.getElementById('confirmation_video_input');
    const confBox = document.getElementById('video-confirmation-box') || confInput?.closest('.photo-upload-box');
    const confPreview = document.getElementById('confirmationVideoPreview');
    
    console.log('üîç Elementos do v√≠deo de confirma√ß√£o:', {
        input: !!confInput,
        box: !!confBox,
        preview: !!confPreview
    });
    
    if (confInput && confBox && confPreview) {
        // Verificar se j√° foi configurado
        if (confInput.dataset.configured === 'true') {
            console.log('‚ö†Ô∏è Upload de confirma√ß√£o j√° configurado, pulando...');
            return;
        }
        
        confInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const url = URL.createObjectURL(file);
                confPreview.src = url;
                confPreview.style.display = 'block';
                confPreview.controls = true;
                const placeholder = confBox.querySelector('.upload-placeholder');
                if (placeholder) {
                    placeholder.style.display = 'none';
                }
                console.log('üé• V√≠deo de confirma√ß√£o selecionado');
            }
        });
        
        confBox.addEventListener('click', function(e) {
            if (e.target !== confInput) {
                console.log('üé• Clique na caixa do v√≠deo de confirma√ß√£o');
                confInput.click();
            }
        });
        
        confInput.dataset.configured = 'true';
        console.log('‚úÖ Upload de confirma√ß√£o configurado');
    } else {
        console.warn('‚ö†Ô∏è Elementos do v√≠deo de confirma√ß√£o n√£o encontrados');
    }
}

// ========================================
// FUN√á√ïES DE ESTADOS E CIDADES
// ========================================

let statesData = null;
let citiesData = null;

async function setupStatesAndCities() {
    console.log('üåç Configurando estados e cidades...');
    
    // Procurar elementos de estado e cidade primeiro; se n√£o existirem, n√£o carregar dados
    let stateSelect = document.getElementById('state_id');
    let citySelect = document.getElementById('city_id');
    if (!stateSelect) {
        stateSelect = document.querySelector('select[name="state_id"]');
    }
    if (!citySelect) {
        citySelect = document.querySelector('select[name="city_id"]');
    }
    if (!stateSelect || !citySelect) {
        console.log('‚ö†Ô∏è Elementos de estado/cidade n√£o presentes na p√°gina atual - abortando carga de dados');
        return;
    }

    // Carregar dados dos arquivos JSON
    try {
        console.log('üì° Carregando estados...');
        const statesResponse = await fetch(`${window.URLADM}assets/js/data/states.json`);
        if (!statesResponse.ok) {
            throw new Error(`Erro HTTP: ${statesResponse.status}`);
        }
        const statesJson = await statesResponse.json();
        statesData = statesJson.data; // O JSON tem uma propriedade 'data'
        console.log('‚úÖ Estados carregados:', statesData.length);
        
        console.log('üì° Carregando cidades...');
        const citiesResponse = await fetch(`${window.URLADM}assets/js/data/cities.json`);
        if (!citiesResponse.ok) {
            throw new Error(`Erro HTTP: ${citiesResponse.status}`);
        }
        const citiesJson = await citiesResponse.json();
        citiesData = citiesJson.data; // O JSON tem uma propriedade 'data'
        console.log('‚úÖ Cidades carregadas:', citiesData.length);
        
    } catch (error) {
        console.error('ERRO ao carregar dados:', error);
        console.log('üîÑ Usando dados de fallback...');
        
        // Fallback com dados b√°sicos
        statesData = [
            { Id: 1, Nome: "Acre", Uf: "AC" },
            { Id: 2, Nome: "Alagoas", Uf: "AL" },
            { Id: 3, Nome: "Amap√°", Uf: "AP" },
            { Id: 4, Nome: "Amazonas", Uf: "AM" },
            { Id: 5, Nome: "Bahia", Uf: "BA" },
            { Id: 6, Nome: "Cear√°", Uf: "CE" },
            { Id: 7, Nome: "Distrito Federal", Uf: "DF" },
            { Id: 8, Nome: "Esp√≠rito Santo", Uf: "ES" },
            { Id: 9, Nome: "Goi√°s", Uf: "GO" },
            { Id: 10, Nome: "Maranh√£o", Uf: "MA" },
            { Id: 11, Nome: "Mato Grosso", Uf: "MT" },
            { Id: 12, Nome: "Mato Grosso do Sul", Uf: "MS" },
            { Id: 13, Nome: "Minas Gerais", Uf: "MG" },
            { Id: 14, Nome: "Par√°", Uf: "PA" },
            { Id: 15, Nome: "Para√≠ba", Uf: "PB" },
            { Id: 16, Nome: "Paran√°", Uf: "PR" },
            { Id: 17, Nome: "Pernambuco", Uf: "PE" },
            { Id: 18, Nome: "Piau√≠", Uf: "PI" },
            { Id: 19, Nome: "Rio de Janeiro", Uf: "RJ" },
            { Id: 20, Nome: "Rio Grande do Norte", Uf: "RN" },
            { Id: 21, Nome: "Rio Grande do Sul", Uf: "RS" },
            { Id: 22, Nome: "Rond√¥nia", Uf: "RO" },
            { Id: 23, Nome: "Roraima", Uf: "RR" },
            { Id: 24, Nome: "Santa Catarina", Uf: "SC" },
            { Id: 25, Nome: "S√£o Paulo", Uf: "SP" },
            { Id: 26, Nome: "Sergipe", Uf: "SE" },
            { Id: 27, Nome: "Tocantins", Uf: "TO" }
        ];
        
        citiesData = [
            { Id: 1, Nome: "Rio Branco", Uf: "AC" },
            { Id: 2, Nome: "Macei√≥", Uf: "AL" },
            { Id: 3, Nome: "Macap√°", Uf: "AP" },
            { Id: 4, Nome: "Manaus", Uf: "AM" },
            { Id: 5, Nome: "Salvador", Uf: "BA" },
            { Id: 6, Nome: "Fortaleza", Uf: "CE" },
            { Id: 7, Nome: "Bras√≠lia", Uf: "DF" },
            { Id: 8, Nome: "Vit√≥ria", Uf: "ES" },
            { Id: 9, Nome: "Goi√¢nia", Uf: "GO" },
            { Id: 10, Nome: "S√£o Lu√≠s", Uf: "MA" },
            { Id: 11, Nome: "Cuiab√°", Uf: "MT" },
            { Id: 12, Nome: "Campo Grande", Uf: "MS" },
            { Id: 13, Nome: "Belo Horizonte", Uf: "MG" },
            { Id: 14, Nome: "Bel√©m", Uf: "PA" },
            { Id: 15, Nome: "Jo√£o Pessoa", Uf: "PB" },
            { Id: 16, Nome: "Curitiba", Uf: "PR" },
            { Id: 17, Nome: "Recife", Uf: "PE" },
            { Id: 18, Nome: "Teresina", Uf: "PI" },
            { Id: 19, Nome: "Rio de Janeiro", Uf: "RJ" },
            { Id: 20, Nome: "Natal", Uf: "RN" },
            { Id: 21, Nome: "Porto Alegre", Uf: "RS" },
            { Id: 22, Nome: "Porto Velho", Uf: "RO" },
            { Id: 23, Nome: "Boa Vista", Uf: "RR" },
            { Id: 24, Nome: "Florian√≥polis", Uf: "SC" },
            { Id: 25, Nome: "S√£o Paulo", Uf: "SP" },
            { Id: 26, Nome: "Aracaju", Uf: "SE" },
            { Id: 27, Nome: "Palmas", Uf: "TO" }
        ];
        
        console.log('‚úÖ Dados de fallback carregados');
    }
    
    console.log('üîç Elementos encontrados:', {
        stateSelect: !!stateSelect,
        citySelect: !!citySelect,
        stateId: stateSelect?.id || stateSelect?.name,
        cityId: citySelect?.id || citySelect?.name
    });
    
    if (!stateSelect || !citySelect) {
        console.log('‚ö†Ô∏è Elementos de estado/cidade n√£o encontrados ainda - ser√° configurado quando o formul√°rio carregar');
        console.log('üîç Todos os selects na p√°gina:', document.querySelectorAll('select'));
        return;
    }
    
    // Popular estados
    console.log('üìù Populando estados...');
    stateSelect.innerHTML = '<option value="">Selecione o estado</option>';
    
    statesData.forEach(state => {
        const option = document.createElement('option');
        option.value = state.Uf;
        option.textContent = state.Nome;
        stateSelect.appendChild(option);
    });
    
    console.log('‚úÖ Estados populados:', stateSelect.children.length - 1, 'op√ß√µes');
    
    // Event listener para mudan√ßa de estado
    stateSelect.addEventListener('change', function() {
        const selectedState = this.value;
        console.log('üåç Estado selecionado:', selectedState);
        
        // Limpar e habilitar cidade
        citySelect.innerHTML = '<option value="">Selecione a cidade</option>';
        citySelect.disabled = false;
        
        if (selectedState) {
            const stateCities = citiesData.filter(city => city.Uf === selectedState);
            console.log(`üîç Cidades encontradas para ${selectedState}:`, stateCities.length);
            
            stateCities.forEach(city => {
                const option = document.createElement('option');
                option.value = city.Id;
                option.textContent = city.Nome;
                citySelect.appendChild(option);
            });
            
            console.log(`‚úÖ Cidades carregadas: ${stateCities.length} op√ß√µes`);
        }
    });
    
    // Event listener para mudan√ßa de cidade
    citySelect.addEventListener('change', function() {
        const selectedCity = this.value;
        console.log('üèôÔ∏è Cidade selecionada:', selectedCity);
        
        // Habilitar campo de bairro quando cidade for selecionada
        const neighborhoodInput = document.getElementById('neighborhood_name');
        if (neighborhoodInput) {
            if (selectedCity) {
                neighborhoodInput.disabled = false;
                neighborhoodInput.placeholder = 'Digite o nome do bairro';
                console.log('‚úÖ Campo de bairro habilitado');
            } else {
                neighborhoodInput.disabled = true;
                neighborhoodInput.placeholder = 'Selecione a cidade primeiro';
                console.log('‚ö†Ô∏è Campo de bairro desabilitado');
            }
        }
    });
    
    console.log('‚úÖ Estados e cidades configurados com sucesso!');
}

// ========================================
// INICIALIZA√á√ÉO AUTOM√ÅTICA
// ========================================

// Inicializar quando o DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupCompleteForm);
} else {
    setupCompleteForm();
}

// Fun√ß√£o para resetar inicializa√ß√£o (para SPA)
function resetFormInitialization() {
    formInitialized = false;
    console.log('üîÑ Flag de inicializa√ß√£o resetada');
}

// Tornar fun√ß√µes globais para SPA
window.setupCompleteForm = setupCompleteForm;
window.resetFormInitialization = resetFormInitialization;